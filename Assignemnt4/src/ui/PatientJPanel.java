/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import model.Hospital.Encounter;
import model.Person.Person;
import model.Person.PersonDirectory;

/**
 *
 * @author kiranreddy
 */
public class PatientJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdateJPanel
     */
    
    PersonDirectory modelPersonObj;
    
    public PatientJPanel(PersonDirectory modelPersonObj) {
        initComponents();
        this.modelPersonObj = modelPersonObj;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
      
    }
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPerson = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        lbPersonId = new javax.swing.JLabel();
        txtPersonId = new javax.swing.JTextField();
        btnViewHistory = new javax.swing.JButton();

        tblPerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Age", "Temperature", "Blood Pressure", "Date Visted ", "ID"
            }
        ));
        jScrollPane1.setViewportView(tblPerson);

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText(" Patient Details");

        lbPersonId.setText("Person Id :");

        btnViewHistory.setText("View");
        btnViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewHistoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbPersonId)
                .addGap(18, 18, 18)
                .addComponent(txtPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnViewHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPersonId)
                    .addComponent(txtPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewHistory))
                .addGap(56, 56, 56)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(293, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewHistoryActionPerformed
        // TODO add your handling code here:
        
        boolean validateData = this.validatePersonId();
        if(validateData){
            
            int id = Integer.parseInt(txtPersonId.getText());
            Person p = this.modelPersonObj.getPersonData(id);
            this.encounterHistory(p.getEncounterHistory());
            
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Please Enter valid PersonId .");
        }


    }//GEN-LAST:event_btnViewHistoryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnViewHistory;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbPersonId;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblPerson;
    private javax.swing.JTextField txtPersonId;
    // End of variables declaration//GEN-END:variables


    private boolean validatePersonId(){
        if (!txtPersonId.getText().isEmpty()) {
            String enteredText = txtPersonId.getText();
            Pattern namePattern = Pattern.compile("[0-9]+");
            Matcher nameMatcher = namePattern.matcher(enteredText);
            if(nameMatcher.matches()){
                boolean idMatch = false;
                int enteredTextInt = Integer.parseInt(enteredText);

                for(Person p : modelPersonObj.getPersonList()){
                    if(p.getPersonId() == enteredTextInt){
                        idMatch = true;
                    }
                }
                
                if(idMatch == true){
                    return true;
                }
            }   
        }
        return false;
    }
    
    private void encounterHistory(ArrayList<Encounter> arrEncount){
        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        model.setRowCount(0);
        
        for(Encounter ecc : arrEncount){
            Object[] row = new Object[5];
            row[0] = ecc;
            row[1] = ecc.getBp();
            row[2] = ecc.getTemperature();
            row[3] = ecc.getEncounterDate();
            row[4] = txtPersonId.getText();
            model.addRow(row);
        }
    }



}
