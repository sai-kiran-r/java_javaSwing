/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;
import java.awt.Dimension;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import model.Hospital.Encounter;
import model.Hospital.VitalSigns;
import model.Person.Person;
import model.Person.PersonDirectory;
import model.Hospital.EncounterHistory;


/**
 *
 * @author kiranreddy
 */
public class EncounterJPanel extends javax.swing.JPanel {

    /**
     * Creates new form EncounterJPanel
     */
    
    PersonDirectory modelPersonObj;
    EncounterHistory ecHistory;
    
    public EncounterJPanel(PersonDirectory modelPersonObj) {
        initComponents();
        this.modelPersonObj = modelPersonObj;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitle = new javax.swing.JLabel();
        lblPersonId = new javax.swing.JLabel();
        txtPersonId = new javax.swing.JTextField();
        lblBp = new javax.swing.JLabel();
        txtBp = new javax.swing.JTextField();
        lblTemperature = new javax.swing.JLabel();
        txttemparature = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();

        lbTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTitle.setText("Encounter Details");

        lblPersonId.setText("Person Id:");

        txtPersonId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPersonIdFocusLost(evt);
            }
        });
        txtPersonId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPersonIdActionPerformed(evt);
            }
        });

        lblBp.setText("Blood Pressure:");

        txtBp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBpFocusLost(evt);
            }
        });
        txtBp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBpActionPerformed(evt);
            }
        });

        lblTemperature.setText("Temparature:");

        txttemparature.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txttemparatureFocusLost(evt);
            }
        });
        txttemparature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttemparatureActionPerformed(evt);
            }
        });

        lblAge.setText("Age:");

        txtAge.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAgeFocusLost(evt);
            }
        });
        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        lblDate.setText("Date:");

        txtDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDateFocusLost(evt);
            }
        });
        txtDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateActionPerformed(evt);
            }
        });

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(279, 279, 279)
                .addComponent(btnSubmit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lblAge)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lblDate)
                            .addGap(18, 18, 18)
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblBp)
                        .addGap(18, 18, 18)
                        .addComponent(txtBp, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTemperature)
                        .addGap(18, 18, 18)
                        .addComponent(txttemparature, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPersonId)
                        .addGap(18, 18, 18)
                        .addComponent(txtPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(204, 204, 204))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblAge, lblBp, lblDate, lblPersonId, lblTemperature});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAge, txtBp, txtDate, txtPersonId, txttemparature});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPersonId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBp, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttemparature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(btnSubmit)
                .addContainerGap(169, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblAge, lblBp, lblDate, lblPersonId, lblTemperature});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtAge, txtBp, txtDate, txtPersonId, txttemparature});

    }// </editor-fold>//GEN-END:initComponents

    private void txtPersonIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPersonIdFocusLost
        // TODO add your handling code here:
        //        if(txtFirstName.getText().isEmpty()){
            //            JOptionPane.showMessageDialog(this, "Please do not leave this field empty!!!");
            //        }
            if(!txtPersonId.getText().isEmpty()){
            String textEntered = txtPersonId.getText();
            Pattern namePattern = Pattern.compile("[0-9]{4}");
            Matcher nameMatcher = namePattern.matcher(textEntered);
            
            if(nameMatcher.matches()){
                boolean id = false;
                int TextInt = Integer.parseInt(textEntered);
                
                for(Person p : modelPersonObj.getPersonList()){
                    if(p.getPersonId() == TextInt){
                        id = true;
                    }
                }
                if(id == false){
                    JOptionPane.showMessageDialog(this, "Please enter a valid Id");
                    txtPersonId.requestFocus();
                } 
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter a valid person ID");
                txtPersonId.requestFocus();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Please enter a valid person ID or create a new person ID");
            txtPersonId.requestFocus();
        }
    }//GEN-LAST:event_txtPersonIdFocusLost

    private void txtPersonIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPersonIdActionPerformed
        // TODO add your handling code here:

   
    }//GEN-LAST:event_txtPersonIdActionPerformed

    private void txtBpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBpFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBpFocusLost

    private void txtBpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBpActionPerformed

    private void txttemparatureFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txttemparatureFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txttemparatureFocusLost

    private void txttemparatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttemparatureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txttemparatureActionPerformed

    private void txtAgeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAgeFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeFocusLost

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void txtDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDateFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateFocusLost

    private void txtDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDateActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:

        boolean validBp = this.validateBloodPressure(txtBp);
        boolean validTemp = this.validateTemperature(txttemparature);
        boolean validAge = this.validateAge(txtAge);
        boolean validDate = this.validDate();
        
        JTextField[] textFieldArray = { txtPersonId, txtBp,  txttemparature, txtAge, txtDate};
        
        if(validBp && validTemp && validAge && validDate){
           
            Date dateEncounter; 
            try {
                dateEncounter = new SimpleDateFormat("mm/dd/yyyy").parse(txtDate.getText());
            } catch (ParseException ex) {
                  JOptionPane.showMessageDialog(this, "Invalid Date format input");
                  dateEncounter = new Date();
            }
            
            int personId = Integer.parseInt(txtPersonId.getText());
            VitalSigns vss = new VitalSigns(
                    Integer.parseInt(txtBp.getText()), 
                    Integer.parseInt(txtAge.getText()),
                    Integer.parseInt(txttemparature.getText()));
            
            Encounter ecc = new Encounter(vss, dateEncounter, personId);
            
            
            JOptionPane.showMessageDialog(this, "Encounter Successfull");
            this.resetTextFields(textFieldArray);
            this.modelPersonObj.AddEncounterForPerson(personId, ecc);
            
        }
        else
        {
            String errMsg = String.format(" Blood Pressure: %s \n" +
              "Blood Temperature: %s \n " +
              "Age: %s \n " +
              "Date: %s \n",
              validBp, validTemp, validAge, validDate);
            
            UIManager.put("OptionPane.minimumSize",new Dimension(100,200));
            JOptionPane.showMessageDialog(this, errMsg);
            
            
        }      
        
    }//GEN-LAST:event_btnSubmitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblBp;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblPersonId;
    private javax.swing.JLabel lblTemperature;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtBp;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtPersonId;
    private javax.swing.JTextField txttemparature;
    // End of variables declaration//GEN-END:variables
//This will reset the fields
    private void resetTextFields(JTextField[] arr){
        for(JTextField pk : arr){
            pk.setText("");
        }
    }


//This validates the ID field
        private boolean validateId(JTextField pk){
        String enteredText = pk.getText();
        if(pk.getText().isEmpty()){
            return false;
        }
        else{
            Pattern namePattern = Pattern.compile("[0-9]{4}");
            Matcher nameMatcher = namePattern.matcher(enteredText);
            if(nameMatcher.matches()){
                return true;
            }
        }
        return false;
    }  
        


//This will validate the age 
        private boolean validateAge(JTextField ok){
        String enteredText = ok.getText();
        if(ok.getText().isEmpty()){
            return false;
        }
        else{
            Pattern namePattern = Pattern.compile("[0-9]+");
            Matcher nameMatcher = namePattern.matcher(enteredText);
            if(nameMatcher.matches())
            {
                int age = Integer.parseInt(enteredText);
                if(age <= 1 || age >= 100){
                    return false;
                }
                return true;
            }
        }
        return false;
    } 


//This will validate blood pressure
        private boolean validateBloodPressure(JTextField ok){
        String enteredText = ok.getText();
        if(ok.getText().isEmpty()){
            return false;
        }
        else{
            Pattern namePattern = Pattern.compile("[0-9]+");
            Matcher nameMatcher = namePattern.matcher(enteredText);
            if(nameMatcher.matches())
            {
                int bloodPressure = Integer.parseInt(enteredText);
                if(bloodPressure <= 55 || bloodPressure >= 300){
                    return false;
                }
                return true;
            }
        }
        return false;
    } 
        
//This will validate  Temperature
        private boolean validateTemperature(JTextField ok){
        String enteredText = ok.getText();
        if(ok.getText().isEmpty()){
            return false;
        }
        else{
            Pattern namePattern = Pattern.compile("[0-9]+");
            Matcher nameMatcher = namePattern.matcher(enteredText);
            if(nameMatcher.matches())
            {
                int bloodPressure = Integer.parseInt(enteredText);
                if(bloodPressure <= 50 || bloodPressure >= 200){
                    return false;
                }
                return true;
            }
        }
        return false;
    } 
        
        
//This will validate the date
    private boolean validDate(){
	String date = txtDate.getText();
        SimpleDateFormat d = new SimpleDateFormat("MM/dd/yyyy");
        d.setLenient(false);
        try{
            d.parse(date);
        }
        catch (ParseException D){
            return false;
        }
        return true;
    }
}
